{
	"name": "Casting types",
	"properties": {
		"description": "Casts the types or else gives the NULL if the value is not able to be casted or some error",
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DelimitedText1",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DepartmentsParquet",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"name": "CacheSink"
				}
			],
			"transformations": [
				{
					"name": "cast1"
				},
				{
					"name": "SplittingRecords"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CustomerID as string,",
				"          ProductID as string,",
				"          Amount as string,",
				"          Date as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source1 cast(output(",
				"          CustomerID as integer,",
				"          ProductID as integer,",
				"          Amount as long,",
				"          Date as date 'dd-mm-yyyy'",
				"     ),",
				"     errors: true) ~> cast1",
				"cast1 split(!isError(),",
				"     disjoint: false) ~> SplittingRecords@(goodRows, badRows)",
				"SplittingRecords@goodRows sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1",
				"SplittingRecords@badRows sink(validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     store: 'cache',",
				"     format: 'inline',",
				"     output: false,",
				"     saveOrder: 1) ~> CacheSink"
			]
		}
	}
}